%{
#include "y.tab.h"
%}

verb is|am|are|was|were|be|being|been|do|does|did|will|would|should|can|could|have|has|had|go|play
adverb very|simply|gently|calmly|quietly
preposition to|from|above|behind|below|between
conjunction if|then|and|but|or
adjective their|my|your|his|her|its
pronoun I|you|he|she|they
noun [a-zA-z]+
%%
[\t ]+ ;
{verb} return VERB;
{adverb} return ADVERB;
{preposition} return PREPOSITION;
{conjunction} return CONJUNCTION;
{adjective} return ADJECTIVE;
{pronoun} return PRONOUN;
{noun} return NOUN;
"\n" return NL;
%%



This code is a combination of a Lex (Flex) scanner and a Yacc (Bison) parser. It is designed to recognize simple and compound sentences based on parts of speech such as verbs, adverbs, prepositions, conjunctions, adjectives, pronouns, and nouns.

### Lex (Scanner) Part

#### Definitions and Declarations Section
```c
%{
#include "y.tab.h"
%}
```
- **`%{ %}`**: Encloses code that will be copied verbatim into the generated lexer file. Here, it includes the `y.tab.h` header file, which is generated by Yacc and contains token definitions.

#### Regular Expressions Definitions
```c
verb is|am|are|was|were|be|being|been|do|does|did|will|would|should|can|could|have|has|had|go|play
adverb very|simply|gently|calmly|quietly
preposition to|from|above|behind|below|between
conjunction if|then|and|but|or
adjective their|my|your|his|her|its
pronoun I|you|he|she|they
noun [a-zA-z]+
```
- **`verb`**: Defines a list of verbs.
- **`adverb`**: Defines a list of adverbs.
- **`preposition`**: Defines a list of prepositions.
- **`conjunction`**: Defines a list of conjunctions.
- **`adjective`**: Defines a list of adjectives.
- **`pronoun`**: Defines a list of pronouns.
- **`noun [a-zA-z]+`**: Defines a noun as any sequence of alphabetic characters.

#### Rules Section
```c
%%
[\t ]+ ;
{verb} return VERB;
{adverb} return ADVERB;
{preposition} return PREPOSITION;
{conjunction} return CONJUNCTION;
{adjective} return ADJECTIVE;
{pronoun} return PRONOUN;
{noun} return NOUN;
"\n" return NL;
%%
```
- **`%%`**: Marks the beginning and end of the rules section.

#### Rules and Actions
- **`[\t ]+ ;`**: Ignore tabs and spaces.
- **`{verb} return VERB;`**: When a verb is matched, return the token `VERB`.
- **`{adverb} return ADVERB;`**: When an adverb is matched, return the token `ADVERB`.
- **`{preposition} return PREPOSITION;`**: When a preposition is matched, return the token `PREPOSITION`.
- **`{conjunction} return CONJUNCTION;`**: When a conjunction is matched, return the token `CONJUNCTION`.
- **`{adjective} return ADJECTIVE;`**: When an adjective is matched, return the token `ADJECTIVE`.
- **`{pronoun} return PRONOUN;`**: When a pronoun is matched, return the token `PRONOUN`.
- **`{noun} return NOUN;`**: When a noun is matched, return the token `NOUN`.
- **`"\n" return NL;`**: When a newline character is matched, return the token `NL`.

### Yacc (Parser) Part

#### Additional C Code for Error Handling and Main Function
```c
%{
#include<stdlib.h>
#include<stdio.h>
int yylex();
int yyerror();
%}
```
- **`%{ %}`**: Encloses additional C code included in the generated parser file. This section includes the standard libraries for input/output and standard library functions and declares the `yylex()` function for lexical analysis and the `yyerror()` function for error reporting.

#### Token Declarations
```c
%token NOUN PRONOUN VERB ADVERB ADJECTIVE PREPOSITION CONJUNCTION NL
```
- **`%token`**: Declares tokens that will be used in the grammar rules.
  - `NOUN`, `PRONOUN`, `VERB`, `ADVERB`, `ADJECTIVE`, `PREPOSITION`, `CONJUNCTION`, `NL`.

#### Grammar Rules
```c
%%
sentence: simple_sentence NL {printf("Parsed a simple sentence \n"); exit(0);}
         | compound_sentence NL {printf("Parsed a compound sentence \n"); exit(0);}
         ;
simple_sentence: subject verb object
             | subject verb object prep_phrase
             ;
compound_sentence: simple_sentence CONJUNCTION simple_sentence
                 | compound_sentence CONJUNCTION simple_sentence
                 ;
subject: NOUN
        | PRONOUN
        | ADJECTIVE subject
        ;
verb: VERB
     | ADVERB VERB
     | verb VERB
     ;
object: NOUN
     | ADJECTIVE object
     ;
prep_phrase: PREPOSITION NOUN
       ;
%%
```
- **`%%`**: Marks the beginning and end of the grammar rules section.

#### Rules and Actions
- **`sentence: simple_sentence NL {printf("Parsed a simple sentence \n"); exit(0);}`**:
  - Defines the start rule for the grammar. It matches a `simple_sentence` followed by a newline `NL`.
  - Prints "Parsed a simple sentence" and exits the program if this rule matches.
- **`sentence: compound_sentence NL {printf("Parsed a compound sentence \n"); exit(0);}`**:
  - Matches a `compound_sentence` followed by a newline `NL`.
  - Prints "Parsed a compound sentence" and exits the program if this rule matches.
- **`simple_sentence: subject verb object | subject verb object prep_phrase`**:
  - Defines a `simple_sentence` as a `subject` followed by a `verb` and an `object`, optionally followed by a `prep_phrase`.
- **`compound_sentence: simple_sentence CONJUNCTION simple_sentence | compound_sentence CONJUNCTION simple_sentence`**:
  - Defines a `compound_sentence` as two `simple_sentence`s connected by a `CONJUNCTION`, or a `compound_sentence` followed by a `CONJUNCTION` and a `simple_sentence`.
- **`subject: NOUN | PRONOUN | ADJECTIVE subject`**:
  - Defines a `subject` as either a `NOUN`, a `PRONOUN`, or an `ADJECTIVE` followed by a `subject`.
- **`verb: VERB | ADVERB VERB | verb VERB`**:
  - Defines a `verb` as a `VERB`, an `ADVERB` followed by a `VERB`, or a `verb` followed by a `VERB`.
- **`object: NOUN | ADJECTIVE object`**:
  - Defines an `object` as either a `NOUN` or an `ADJECTIVE` followed by an `object`.
- **`prep_phrase: PREPOSITION NOUN`**:
  - Defines a `prep_phrase` as a `PREPOSITION` followed by a `NOUN`.

#### Additional C Code for Main Function and Error Handling
```c
int main()
{
 yyparse();
}

int yyerror()
{
 printf("\n Invalid");
}

int yywrap()
{
 return 1;
}
```
- **`int main()`**: Defines the `main()` function which is the entry point of the program.
  - Calls `yyparse()`, which initiates the parsing process.
- **`int yyerror()`**: Defines the `yyerror()` function which is called when a syntax error is encountered during parsing.
  - Prints "Invalid".
- **`int yywrap()`**: Defines the `yywrap()` function which is called when the end of the input is reached.
  - Returns 1 to indicate the end of the input.

### Summary
1. **Lex Part:**
   - Scans input to recognize verbs, adverbs, prepositions, conjunctions, adjectives, pronouns, nouns, and newlines.
   - Returns appropriate tokens for each recognized pattern.

2. **Yacc Part:**
   - Defines the grammar for simple and compound sentences.
   - Recognizes simple sentences with a subject, verb, and object, optionally followed by a prepositional phrase.
   - Recognizes compound sentences with two simple sentences connected by a conjunction.
   - Prints a message and exits if a valid sentence is parsed, otherwise prints "Invalid" on error.

This combination of Lex and Yacc provides a basic framework for parsing and validating simple and compound sentences in English based on their grammatical structure.