%{
 int ccount=0,capcount=0,smallcount=0,lcount=0;
%}
cword [A-Z]+
sword [a-z]+
eol \n
%%
{cword} {capcount++;ccount+=yyleng;}
{sword} {smallcount++;ccount+=yyleng;}
{eol} {ccount++;lcount++;}
 .   {ccount++;}
%%
 
int main(void)
 {
   yylex();
   printf("\n Number of characters : %d",ccount);  
   printf("\n Number of capital case words : %d",capcount);  
   printf("\n Number of small case words : %d",smallcount);  
   printf("\n Number of lines : %d",lcount);
   return 0;  
 }

int yywrap()
{ 
  return 1;
}

input file.txt
sys PROG
op sys
cl TE
br COMP
div B
ES iot
wt


This Lex (Flex) program reads an input file, counts the number of characters, capital case words, small case words, and lines, then prints these statistics. Here is a detailed explanation of the code line by line:

### Definitions and Declarations Section
```c
%{
 int ccount=0, capcount=0, smallcount=0, lcount=0;
%}
```
- **`%{ %}`**: Encloses code that will be copied verbatim into the generated lexer file. Here, it declares four integer variables:
  - `ccount`: Total number of characters.
  - `capcount`: Number of capital case words.
  - `smallcount`: Number of small case words.
  - `lcount`: Number of lines.

### Regular Expressions Definitions
```c
cword [A-Z]+
sword [a-z]+
eol \n
```
- **`cword [A-Z]+`**: Defines `cword` as one or more uppercase alphabetic characters.
- **`sword [a-z]+`**: Defines `sword` as one or more lowercase alphabetic characters.
- **`eol \n`**: Defines `eol` as a newline character.

### Rules Section
```c
%%
{cword} {capcount++; ccount += yyleng;}
{sword} {smallcount++; ccount += yyleng;}
{eol} {ccount++; lcount++;}
 .    {ccount++;}
%%
```
- **`%%`**: Marks the beginning and end of the rules section.

#### Rules and Actions
- **`{cword} {capcount++; ccount += yyleng;}`**:
  - When a `cword` (capital word) is matched, increment `capcount` by 1.
  - Increment `ccount` by the length of the matched string (`yyleng`).

- **`{sword} {smallcount++; ccount += yyleng;}`**:
  - When a `sword` (small word) is matched, increment `smallcount` by 1.
  - Increment `ccount` by the length of the matched string (`yyleng`).

- **`{eol} {ccount++; lcount++;}`**:
  - When an `eol` (end of line) is matched, increment `ccount` by 1 and `lcount` by 1.

- **` . {ccount++;}`**:
  - Matches any single character not matched by previous rules (including spaces, punctuation, etc.).
  - Increment `ccount` by 1.

### User Code Section
```c
int main(void)
{
   yylex();
   printf("\n Number of characters : %d", ccount);  
   printf("\n Number of capital case words : %d", capcount);  
   printf("\n Number of small case words : %d", smallcount);  
   printf("\n Number of lines : %d", lcount);
   return 0;  
}

int yywrap()
{ 
   return 1;
}
```
- **`int main(void)`**: The main function where the program execution starts.
  - **`yylex();`**: Calls the lexical analyzer function generated by Lex, which processes the input and applies the rules defined above.
  - **`printf("\n Number of characters : %d", ccount);`**: Prints the total number of characters.
  - **`printf("\n Number of capital case words : %d", capcount);`**: Prints the number of capital case words.
  - **`printf("\n Number of small case words : %d", smallcount);`**: Prints the number of small case words.
  - **`printf("\n Number of lines : %d", lcount);`**: Prints the number of lines.
  - **`return 0;`**: Ends the main function, returning 0 to indicate successful execution.

- **`int yywrap()`**: A function called when `yylex` reaches the end of the input.
  - **`return 1;`**: Indicates to `yylex` that it should stop processing and terminate.

### Input File (`file.txt`)
```
sys PROG
op sys
cl TE
br COMP
div B
ES iot
wt
```
This input file contains a mixture of lowercase words, uppercase words, and newline characters. The Lex program processes this file and counts the characters, capital case words, small case words, and lines as follows:

- `sys`, `op`, `sys`, `cl`, `div`, `iot`, `wt` are lowercase words.
- `PROG`, `TE`, `COMP`, `B`, `ES` are capital case words.
- There are 7 lines in total.

### Execution Output
After processing the `file.txt`, the program will output statistics similar to:
```
Number of characters : [total count of characters]
Number of capital case words : [count of capital words]
Number of small case words : [count of small words]
Number of lines : [count of lines]
```

Given the input file:
- Total number of characters includes all letters and newline characters.
- The number of capital case words is the count of words consisting only of uppercase letters.
- The number of small case words is the count of words consisting only of lowercase letters.
- The number of lines is the count of newline characters.

This code is a straightforward example of using Lex for text processing and counting different types of tokens in a text file.